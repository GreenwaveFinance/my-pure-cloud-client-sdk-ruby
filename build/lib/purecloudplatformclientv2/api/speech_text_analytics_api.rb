=begin
PureCloud Platform API

With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.

OpenAPI spec version: v2
Contact: DeveloperEvangelists@genesys.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

License: UNLICENSED
https://help.mypurecloud.com/articles/terms-and-conditions/

Terms of Service: https://help.mypurecloud.com/articles/terms-and-conditions/

=end

require "uri"

module PureCloud
  class SpeechTextAnalyticsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get a Speech & Text Analytics program by id
    # 
    # @param program_id The id of the topic to get
    # @param [Hash] opts the optional parameters
    # @return [Program]
    def get_speechandtextanalytics_program(program_id, opts = {})
      data, _status_code, _headers = get_speechandtextanalytics_program_with_http_info(program_id, opts)
      return data
    end

    # Get a Speech &amp; Text Analytics program by id
    # 
    # @param program_id The id of the topic to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(Program, Fixnum, Hash)>] Program data, response status code and response headers
    def get_speechandtextanalytics_program_with_http_info(program_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SpeechTextAnalyticsApi.get_speechandtextanalytics_program ..."
      end
      
      
      # verify the required parameter 'program_id' is set
      fail ArgumentError, "Missing the required parameter 'program_id' when calling SpeechTextAnalyticsApi.get_speechandtextanalytics_program" if program_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/speechandtextanalytics/programs/{programId}".sub('{format}','json').sub('{' + 'programId' + '}', program_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Program')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpeechTextAnalyticsApi#get_speechandtextanalytics_program\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Speech & Text Analytics topic by id
    # 
    # @param topic_id The id of the topic to get
    # @param [Hash] opts the optional parameters
    # @return [Topic]
    def get_speechandtextanalytics_topic(topic_id, opts = {})
      data, _status_code, _headers = get_speechandtextanalytics_topic_with_http_info(topic_id, opts)
      return data
    end

    # Get a Speech &amp; Text Analytics topic by id
    # 
    # @param topic_id The id of the topic to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(Topic, Fixnum, Hash)>] Topic data, response status code and response headers
    def get_speechandtextanalytics_topic_with_http_info(topic_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SpeechTextAnalyticsApi.get_speechandtextanalytics_topic ..."
      end
      
      
      # verify the required parameter 'topic_id' is set
      fail ArgumentError, "Missing the required parameter 'topic_id' when calling SpeechTextAnalyticsApi.get_speechandtextanalytics_topic" if topic_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/speechandtextanalytics/topics/{topicId}".sub('{format}','json').sub('{' + 'topicId' + '}', topic_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Topic')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpeechTextAnalyticsApi#get_speechandtextanalytics_topic\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create new Speech & Text Analytics topic
    # 
    # @param body The topic to create
    # @param [Hash] opts the optional parameters
    # @return [Topic]
    def post_speechandtextanalytics_topics(body, opts = {})
      data, _status_code, _headers = post_speechandtextanalytics_topics_with_http_info(body, opts)
      return data
    end

    # Create new Speech &amp; Text Analytics topic
    # 
    # @param body The topic to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(Topic, Fixnum, Hash)>] Topic data, response status code and response headers
    def post_speechandtextanalytics_topics_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SpeechTextAnalyticsApi.post_speechandtextanalytics_topics ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling SpeechTextAnalyticsApi.post_speechandtextanalytics_topics" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/speechandtextanalytics/topics".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Topic')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpeechTextAnalyticsApi#post_speechandtextanalytics_topics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
