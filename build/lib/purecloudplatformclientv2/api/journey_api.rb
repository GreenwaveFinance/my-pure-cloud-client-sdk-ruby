=begin
PureCloud Platform API

With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.

OpenAPI spec version: v2
Contact: DeveloperEvangelists@genesys.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

License: UNLICENSED
https://help.mypurecloud.com/articles/terms-and-conditions/

Terms of Service: https://help.mypurecloud.com/articles/terms-and-conditions/

=end

require "uri"

module PureCloud
  class JourneyApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Retrieve all events for a given session.
    # 
    # @param session_id System-generated UUID that represents the session the event is a part of.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :before The cursor that points to the start of the set of entities that has been returned.
    # @option opts [String] :after The cursor that points to the end of the set of entities that has been returned.
    # @option opts [String] :limit Number of entities to return. Maximum of 200.
    # @return [EventListing]
    def get_journey_session_events(session_id, opts = {})
      data, _status_code, _headers = get_journey_session_events_with_http_info(session_id, opts)
      return data
    end

    # Retrieve all events for a given session.
    # 
    # @param session_id System-generated UUID that represents the session the event is a part of.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :before The cursor that points to the start of the set of entities that has been returned.
    # @option opts [String] :after The cursor that points to the end of the set of entities that has been returned.
    # @option opts [String] :limit Number of entities to return. Maximum of 200.
    # @return [Array<(EventListing, Fixnum, Hash)>] EventListing data, response status code and response headers
    def get_journey_session_events_with_http_info(session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JourneyApi.get_journey_session_events ..."
      end
      
      
      # verify the required parameter 'session_id' is set
      fail ArgumentError, "Missing the required parameter 'session_id' when calling JourneyApi.get_journey_session_events" if session_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/journey/sessions/{sessionId}/events".sub('{format}','json').sub('{' + 'sessionId' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'before'] = opts[:'before'] if opts[:'before']
      query_params[:'after'] = opts[:'after'] if opts[:'after']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EventListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JourneyApi#get_journey_session_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
