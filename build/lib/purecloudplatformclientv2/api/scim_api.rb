=begin
PureCloud Platform API

With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.

OpenAPI spec version: v2
Contact: DeveloperEvangelists@genesys.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

License: UNLICENSED
https://help.mypurecloud.com/articles/terms-and-conditions/

Terms of Service: https://help.mypurecloud.com/articles/terms-and-conditions/

=end

require "uri"

module PureCloud
  class SCIMApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Soft delete user with specified ID
    # 
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match If-Match for ETag version checking
    # @return [Empty]
    def delete_scim_user(user_id, opts = {})
      data, _status_code, _headers = delete_scim_user_with_http_info(user_id, opts)
      return data
    end

    # Soft delete user with specified ID
    # 
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match If-Match for ETag version checking
    # @return [Array<(Empty, Fixnum, Hash)>] Empty data, response status code and response headers
    def delete_scim_user_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SCIMApi.delete_scim_user ..."
      end
      
      
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling SCIMApi.delete_scim_user" if user_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/scim/users/{userId}".sub('{format}','json').sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/scim+json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/scim+json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'If-Match'] = opts[:'if_match'] if opts[:'if_match']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Empty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SCIMApi#delete_scim_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Soft delete user with specified ID
    # 
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match If-Match for ETag version checking
    # @return [Empty]
    def delete_scim_v2_user(user_id, opts = {})
      data, _status_code, _headers = delete_scim_v2_user_with_http_info(user_id, opts)
      return data
    end

    # Soft delete user with specified ID
    # 
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match If-Match for ETag version checking
    # @return [Array<(Empty, Fixnum, Hash)>] Empty data, response status code and response headers
    def delete_scim_v2_user_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SCIMApi.delete_scim_v2_user ..."
      end
      
      
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling SCIMApi.delete_scim_v2_user" if user_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/scim/v2/users/{userId}".sub('{format}','json').sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/scim+json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/scim+json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'If-Match'] = opts[:'if_match'] if opts[:'if_match']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Empty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SCIMApi#delete_scim_v2_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return Group with specified ID
    # 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_none_match If-None-Match for ETag version checking
    # @return [ScimV2Group]
    def get_scim_group(group_id, opts = {})
      data, _status_code, _headers = get_scim_group_with_http_info(group_id, opts)
      return data
    end

    # Return Group with specified ID
    # 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_none_match If-None-Match for ETag version checking
    # @return [Array<(ScimV2Group, Fixnum, Hash)>] ScimV2Group data, response status code and response headers
    def get_scim_group_with_http_info(group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SCIMApi.get_scim_group ..."
      end
      
      
      # verify the required parameter 'group_id' is set
      fail ArgumentError, "Missing the required parameter 'group_id' when calling SCIMApi.get_scim_group" if group_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/scim/groups/{groupId}".sub('{format}','json').sub('{' + 'groupId' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/scim+json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/scim+json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'If-None-Match'] = opts[:'if_none_match'] if opts[:'if_none_match']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ScimV2Group')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SCIMApi#get_scim_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query Groups
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_index Starting item of request. 1-based (default to 1)
    # @option opts [Integer] :count The requested number of items per page. A value of 0 will return no results other than the totalResults count. (default to 25)
    # @option opts [String] :filter filter parameter e.g. displayName eq groupName
    # @return [ScimListResponse]
    def get_scim_groups(opts = {})
      data, _status_code, _headers = get_scim_groups_with_http_info(opts)
      return data
    end

    # Query Groups
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_index Starting item of request. 1-based
    # @option opts [Integer] :count The requested number of items per page. A value of 0 will return no results other than the totalResults count.
    # @option opts [String] :filter filter parameter e.g. displayName eq groupName
    # @return [Array<(ScimListResponse, Fixnum, Hash)>] ScimListResponse data, response status code and response headers
    def get_scim_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SCIMApi.get_scim_groups ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/scim/groups".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'startIndex'] = opts[:'start_index'] if opts[:'start_index']
      query_params[:'count'] = opts[:'count'] if opts[:'count']
      query_params[:'filter'] = opts[:'filter'] if opts[:'filter']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/scim+json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/scim+json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ScimListResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SCIMApi#get_scim_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return user with specified ID (default version)
    # 
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_none_match If-None-Match for ETag version checking
    # @return [ScimV2User]
    def get_scim_user(user_id, opts = {})
      data, _status_code, _headers = get_scim_user_with_http_info(user_id, opts)
      return data
    end

    # Return user with specified ID (default version)
    # 
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_none_match If-None-Match for ETag version checking
    # @return [Array<(ScimV2User, Fixnum, Hash)>] ScimV2User data, response status code and response headers
    def get_scim_user_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SCIMApi.get_scim_user ..."
      end
      
      
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling SCIMApi.get_scim_user" if user_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/scim/users/{userId}".sub('{format}','json').sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/scim+json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/scim+json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'If-None-Match'] = opts[:'if_none_match'] if opts[:'if_none_match']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ScimV2User')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SCIMApi#get_scim_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query Users
    # 
    # @param filter filter parameter e.g. userName eq search@sample.org
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_index Starting item of request. 1-based (default to 1)
    # @option opts [Integer] :count The requested number of items per page. A value of 0 will return no results other than the totalResults count. (default to 25)
    # @return [ScimListResponse]
    def get_scim_users(filter, opts = {})
      data, _status_code, _headers = get_scim_users_with_http_info(filter, opts)
      return data
    end

    # Query Users
    # 
    # @param filter filter parameter e.g. userName eq search@sample.org
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_index Starting item of request. 1-based
    # @option opts [Integer] :count The requested number of items per page. A value of 0 will return no results other than the totalResults count.
    # @return [Array<(ScimListResponse, Fixnum, Hash)>] ScimListResponse data, response status code and response headers
    def get_scim_users_with_http_info(filter, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SCIMApi.get_scim_users ..."
      end
      
      
      # verify the required parameter 'filter' is set
      fail ArgumentError, "Missing the required parameter 'filter' when calling SCIMApi.get_scim_users" if filter.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/scim/users".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'filter'] = filter
      query_params[:'startIndex'] = opts[:'start_index'] if opts[:'start_index']
      query_params[:'count'] = opts[:'count'] if opts[:'count']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/scim+json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/scim+json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ScimListResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SCIMApi#get_scim_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return Group with specified ID
    # 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_none_match If-None-Match for ETag version checking
    # @return [ScimV2Group]
    def get_scim_v2_group(group_id, opts = {})
      data, _status_code, _headers = get_scim_v2_group_with_http_info(group_id, opts)
      return data
    end

    # Return Group with specified ID
    # 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_none_match If-None-Match for ETag version checking
    # @return [Array<(ScimV2Group, Fixnum, Hash)>] ScimV2Group data, response status code and response headers
    def get_scim_v2_group_with_http_info(group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SCIMApi.get_scim_v2_group ..."
      end
      
      
      # verify the required parameter 'group_id' is set
      fail ArgumentError, "Missing the required parameter 'group_id' when calling SCIMApi.get_scim_v2_group" if group_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/scim/v2/groups/{groupId}".sub('{format}','json').sub('{' + 'groupId' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/scim+json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/scim+json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'If-None-Match'] = opts[:'if_none_match'] if opts[:'if_none_match']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ScimV2Group')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SCIMApi#get_scim_v2_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query Groups
    # 
    # @param filter filter parameter e.g. displayName eq groupName
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_index Starting item of request. 1-based (default to 1)
    # @option opts [Integer] :count The requested number of items per page. A value of 0 will return no results other than the totalResults count. (default to 25)
    # @return [ScimListResponse]
    def get_scim_v2_groups(filter, opts = {})
      data, _status_code, _headers = get_scim_v2_groups_with_http_info(filter, opts)
      return data
    end

    # Query Groups
    # 
    # @param filter filter parameter e.g. displayName eq groupName
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_index Starting item of request. 1-based
    # @option opts [Integer] :count The requested number of items per page. A value of 0 will return no results other than the totalResults count.
    # @return [Array<(ScimListResponse, Fixnum, Hash)>] ScimListResponse data, response status code and response headers
    def get_scim_v2_groups_with_http_info(filter, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SCIMApi.get_scim_v2_groups ..."
      end
      
      
      # verify the required parameter 'filter' is set
      fail ArgumentError, "Missing the required parameter 'filter' when calling SCIMApi.get_scim_v2_groups" if filter.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/scim/v2/groups".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'filter'] = filter
      query_params[:'startIndex'] = opts[:'start_index'] if opts[:'start_index']
      query_params[:'count'] = opts[:'count'] if opts[:'count']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/scim+json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/scim+json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ScimListResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SCIMApi#get_scim_v2_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get SCIM Configuration
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_none_match If-None-Match for ETag version checking
    # @return [ScimServiceProviderConfig]
    def get_scim_v2_serviceproviderconfig(opts = {})
      data, _status_code, _headers = get_scim_v2_serviceproviderconfig_with_http_info(opts)
      return data
    end

    # Get SCIM Configuration
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_none_match If-None-Match for ETag version checking
    # @return [Array<(ScimServiceProviderConfig, Fixnum, Hash)>] ScimServiceProviderConfig data, response status code and response headers
    def get_scim_v2_serviceproviderconfig_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SCIMApi.get_scim_v2_serviceproviderconfig ..."
      end
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/scim/v2/serviceproviderconfig".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/scim+json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/scim+json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'If-None-Match'] = opts[:'if_none_match'] if opts[:'if_none_match']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ScimServiceProviderConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SCIMApi#get_scim_v2_serviceproviderconfig\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return User with specified ID
    # 
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_none_match If-None-Match for ETag version checking
    # @return [ScimV2User]
    def get_scim_v2_user(user_id, opts = {})
      data, _status_code, _headers = get_scim_v2_user_with_http_info(user_id, opts)
      return data
    end

    # Return User with specified ID
    # 
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_none_match If-None-Match for ETag version checking
    # @return [Array<(ScimV2User, Fixnum, Hash)>] ScimV2User data, response status code and response headers
    def get_scim_v2_user_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SCIMApi.get_scim_v2_user ..."
      end
      
      
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling SCIMApi.get_scim_v2_user" if user_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/scim/v2/users/{userId}".sub('{format}','json').sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/scim+json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/scim+json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'If-None-Match'] = opts[:'if_none_match'] if opts[:'if_none_match']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ScimV2User')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SCIMApi#get_scim_v2_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query Users
    # 
    # @param filter filter parameter e.g. userName eq search@sample.org
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_index Starting item of request. 1-based (default to 1)
    # @option opts [Integer] :count The requested number of items per page. A value of 0 will return no results other than the totalResults count. (default to 25)
    # @return [ScimListResponse]
    def get_scim_v2_users(filter, opts = {})
      data, _status_code, _headers = get_scim_v2_users_with_http_info(filter, opts)
      return data
    end

    # Query Users
    # 
    # @param filter filter parameter e.g. userName eq search@sample.org
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_index Starting item of request. 1-based
    # @option opts [Integer] :count The requested number of items per page. A value of 0 will return no results other than the totalResults count.
    # @return [Array<(ScimListResponse, Fixnum, Hash)>] ScimListResponse data, response status code and response headers
    def get_scim_v2_users_with_http_info(filter, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SCIMApi.get_scim_v2_users ..."
      end
      
      
      # verify the required parameter 'filter' is set
      fail ArgumentError, "Missing the required parameter 'filter' when calling SCIMApi.get_scim_v2_users" if filter.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/scim/v2/users".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'filter'] = filter
      query_params[:'startIndex'] = opts[:'start_index'] if opts[:'start_index']
      query_params[:'count'] = opts[:'count'] if opts[:'count']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/scim+json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/scim+json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ScimListResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SCIMApi#get_scim_v2_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Group with specified ID
    # 
    # @param group_id 
    # @param body Group
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match If-Match for ETag version checking
    # @return [ScimV2Group]
    def patch_scim_group(group_id, body, opts = {})
      data, _status_code, _headers = patch_scim_group_with_http_info(group_id, body, opts)
      return data
    end

    # Update Group with specified ID
    # 
    # @param group_id 
    # @param body Group
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match If-Match for ETag version checking
    # @return [Array<(ScimV2Group, Fixnum, Hash)>] ScimV2Group data, response status code and response headers
    def patch_scim_group_with_http_info(group_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SCIMApi.patch_scim_group ..."
      end
      
      
      # verify the required parameter 'group_id' is set
      fail ArgumentError, "Missing the required parameter 'group_id' when calling SCIMApi.patch_scim_group" if group_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling SCIMApi.patch_scim_group" if body.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/scim/groups/{groupId}".sub('{format}','json').sub('{' + 'groupId' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/scim+json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/scim+json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'If-Match'] = opts[:'if_match'] if opts[:'if_match']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ScimV2Group')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SCIMApi#patch_scim_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Patch user with specified ID
    # 
    # @param user_id 
    # @param body SCIM Patch Request
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match If-Match for ETag version checking
    # @return [ScimV2User]
    def patch_scim_user(user_id, body, opts = {})
      data, _status_code, _headers = patch_scim_user_with_http_info(user_id, body, opts)
      return data
    end

    # Patch user with specified ID
    # 
    # @param user_id 
    # @param body SCIM Patch Request
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match If-Match for ETag version checking
    # @return [Array<(ScimV2User, Fixnum, Hash)>] ScimV2User data, response status code and response headers
    def patch_scim_user_with_http_info(user_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SCIMApi.patch_scim_user ..."
      end
      
      
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling SCIMApi.patch_scim_user" if user_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling SCIMApi.patch_scim_user" if body.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/scim/users/{userId}".sub('{format}','json').sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/scim+json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/scim+json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'If-Match'] = opts[:'if_match'] if opts[:'if_match']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ScimV2User')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SCIMApi#patch_scim_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Group with specified ID
    # 
    # @param group_id 
    # @param body Group
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match If-Match for ETag version checking
    # @return [ScimV2Group]
    def patch_scim_v2_group(group_id, body, opts = {})
      data, _status_code, _headers = patch_scim_v2_group_with_http_info(group_id, body, opts)
      return data
    end

    # Update Group with specified ID
    # 
    # @param group_id 
    # @param body Group
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match If-Match for ETag version checking
    # @return [Array<(ScimV2Group, Fixnum, Hash)>] ScimV2Group data, response status code and response headers
    def patch_scim_v2_group_with_http_info(group_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SCIMApi.patch_scim_v2_group ..."
      end
      
      
      # verify the required parameter 'group_id' is set
      fail ArgumentError, "Missing the required parameter 'group_id' when calling SCIMApi.patch_scim_v2_group" if group_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling SCIMApi.patch_scim_v2_group" if body.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/scim/v2/groups/{groupId}".sub('{format}','json').sub('{' + 'groupId' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/scim+json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/scim+json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'If-Match'] = opts[:'if_match'] if opts[:'if_match']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ScimV2Group')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SCIMApi#patch_scim_v2_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update user with specified ID
    # 
    # @param user_id User Id
    # @param body SCIM Patch Request
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match If-Match for ETag version checking
    # @return [ScimV2User]
    def patch_scim_v2_user(user_id, body, opts = {})
      data, _status_code, _headers = patch_scim_v2_user_with_http_info(user_id, body, opts)
      return data
    end

    # Update user with specified ID
    # 
    # @param user_id User Id
    # @param body SCIM Patch Request
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match If-Match for ETag version checking
    # @return [Array<(ScimV2User, Fixnum, Hash)>] ScimV2User data, response status code and response headers
    def patch_scim_v2_user_with_http_info(user_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SCIMApi.patch_scim_v2_user ..."
      end
      
      
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling SCIMApi.patch_scim_v2_user" if user_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling SCIMApi.patch_scim_v2_user" if body.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/scim/v2/users/{userId}".sub('{format}','json').sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/scim+json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/scim+json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'If-Match'] = opts[:'if_match'] if opts[:'if_match']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ScimV2User')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SCIMApi#patch_scim_v2_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create user
    # 
    # @param body SCIM Create User
    # @param [Hash] opts the optional parameters
    # @return [ScimV2User]
    def post_scim_users(body, opts = {})
      data, _status_code, _headers = post_scim_users_with_http_info(body, opts)
      return data
    end

    # Create user
    # 
    # @param body SCIM Create User
    # @param [Hash] opts the optional parameters
    # @return [Array<(ScimV2User, Fixnum, Hash)>] ScimV2User data, response status code and response headers
    def post_scim_users_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SCIMApi.post_scim_users ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling SCIMApi.post_scim_users" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/scim/users".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/scim+json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/scim+json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ScimV2User')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SCIMApi#post_scim_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create user
    # 
    # @param body SCIM Create User
    # @param [Hash] opts the optional parameters
    # @return [ScimV2User]
    def post_scim_v2_users(body, opts = {})
      data, _status_code, _headers = post_scim_v2_users_with_http_info(body, opts)
      return data
    end

    # Create user
    # 
    # @param body SCIM Create User
    # @param [Hash] opts the optional parameters
    # @return [Array<(ScimV2User, Fixnum, Hash)>] ScimV2User data, response status code and response headers
    def post_scim_v2_users_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SCIMApi.post_scim_v2_users ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling SCIMApi.post_scim_v2_users" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/scim/v2/users".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/scim+json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/scim+json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ScimV2User')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SCIMApi#post_scim_v2_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Group with specified ID
    # 
    # @param group_id 
    # @param body Group
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match If-Match for ETag version checking
    # @return [ScimV2Group]
    def put_scim_group(group_id, body, opts = {})
      data, _status_code, _headers = put_scim_group_with_http_info(group_id, body, opts)
      return data
    end

    # Update Group with specified ID
    # 
    # @param group_id 
    # @param body Group
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match If-Match for ETag version checking
    # @return [Array<(ScimV2Group, Fixnum, Hash)>] ScimV2Group data, response status code and response headers
    def put_scim_group_with_http_info(group_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SCIMApi.put_scim_group ..."
      end
      
      
      # verify the required parameter 'group_id' is set
      fail ArgumentError, "Missing the required parameter 'group_id' when calling SCIMApi.put_scim_group" if group_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling SCIMApi.put_scim_group" if body.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/scim/groups/{groupId}".sub('{format}','json').sub('{' + 'groupId' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/scim+json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/scim+json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'If-Match'] = opts[:'if_match'] if opts[:'if_match']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ScimV2Group')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SCIMApi#put_scim_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update user with specified ID
    # 
    # @param user_id 
    # @param body User
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match If-Match for ETag version checking
    # @return [ScimV2User]
    def put_scim_user(user_id, body, opts = {})
      data, _status_code, _headers = put_scim_user_with_http_info(user_id, body, opts)
      return data
    end

    # Update user with specified ID
    # 
    # @param user_id 
    # @param body User
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match If-Match for ETag version checking
    # @return [Array<(ScimV2User, Fixnum, Hash)>] ScimV2User data, response status code and response headers
    def put_scim_user_with_http_info(user_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SCIMApi.put_scim_user ..."
      end
      
      
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling SCIMApi.put_scim_user" if user_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling SCIMApi.put_scim_user" if body.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/scim/users/{userId}".sub('{format}','json').sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/scim+json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/scim+json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'If-Match'] = opts[:'if_match'] if opts[:'if_match']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ScimV2User')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SCIMApi#put_scim_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Group with specified ID
    # 
    # @param group_id 
    # @param body Group
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match If-Match for ETag version checking
    # @return [ScimV2Group]
    def put_scim_v2_group(group_id, body, opts = {})
      data, _status_code, _headers = put_scim_v2_group_with_http_info(group_id, body, opts)
      return data
    end

    # Update Group with specified ID
    # 
    # @param group_id 
    # @param body Group
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match If-Match for ETag version checking
    # @return [Array<(ScimV2Group, Fixnum, Hash)>] ScimV2Group data, response status code and response headers
    def put_scim_v2_group_with_http_info(group_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SCIMApi.put_scim_v2_group ..."
      end
      
      
      # verify the required parameter 'group_id' is set
      fail ArgumentError, "Missing the required parameter 'group_id' when calling SCIMApi.put_scim_v2_group" if group_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling SCIMApi.put_scim_v2_group" if body.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/scim/v2/groups/{groupId}".sub('{format}','json').sub('{' + 'groupId' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/scim+json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/scim+json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'If-Match'] = opts[:'if_match'] if opts[:'if_match']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ScimV2Group')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SCIMApi#put_scim_v2_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update user with specified ID
    # 
    # @param user_id User Id
    # @param body User
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match If-Match for ETag version checking
    # @return [ScimV2User]
    def put_scim_v2_user(user_id, body, opts = {})
      data, _status_code, _headers = put_scim_v2_user_with_http_info(user_id, body, opts)
      return data
    end

    # Update user with specified ID
    # 
    # @param user_id User Id
    # @param body User
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match If-Match for ETag version checking
    # @return [Array<(ScimV2User, Fixnum, Hash)>] ScimV2User data, response status code and response headers
    def put_scim_v2_user_with_http_info(user_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SCIMApi.put_scim_v2_user ..."
      end
      
      
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling SCIMApi.put_scim_v2_user" if user_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling SCIMApi.put_scim_v2_user" if body.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/scim/v2/users/{userId}".sub('{format}','json').sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/scim+json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/scim+json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'If-Match'] = opts[:'if_match'] if opts[:'if_match']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ScimV2User')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SCIMApi#put_scim_v2_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
