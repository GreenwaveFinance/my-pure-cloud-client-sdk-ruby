=begin
PureCloud Platform API

With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.

OpenAPI spec version: v2
Contact: DeveloperEvangelists@genesys.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

License: UNLICENSED
https://help.mypurecloud.com/articles/terms-and-conditions/

Terms of Service: https://help.mypurecloud.com/articles/terms-and-conditions/

=end

require "uri"

module PureCloud
  class MessagingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get a list of Messaging Stickers
    # 
    # @param messenger_type Messenger Type
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size (default to 25)
    # @option opts [Integer] :page_number Page number (default to 1)
    # @return [MessagingStickerEntityListing]
    def get_messaging_sticker(messenger_type, opts = {})
      data, _status_code, _headers = get_messaging_sticker_with_http_info(messenger_type, opts)
      return data
    end

    # Get a list of Messaging Stickers
    # 
    # @param messenger_type Messenger Type
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size
    # @option opts [Integer] :page_number Page number
    # @return [Array<(MessagingStickerEntityListing, Fixnum, Hash)>] MessagingStickerEntityListing data, response status code and response headers
    def get_messaging_sticker_with_http_info(messenger_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MessagingApi.get_messaging_sticker ..."
      end
      
      
      # verify the required parameter 'messenger_type' is set
      fail ArgumentError, "Missing the required parameter 'messenger_type' when calling MessagingApi.get_messaging_sticker" if messenger_type.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/messaging/stickers/{messengerType}".sub('{format}','json').sub('{' + 'messengerType' + '}', messenger_type.to_s)

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MessagingStickerEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApi#get_messaging_sticker\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
